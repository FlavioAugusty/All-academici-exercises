 //Definindo uma fun√ß√£o

/**
 *  A declara√ß√£o de uma fun√ß√£o mais cl√°ssica se baseia no uso da palavra-chave function, seguida dos seguintes termos:
 * 
 * O nome da fun√ß√£o (obedecendo a mesma regra de nome das vari√°veis)
 * Lista de par√¢metros que a fun√ß√£o vai ter (vari√°veis a serem utilizadas), entre par√™nteses e separadas por v√≠rgulas
 * O c√≥digo a ser executado entre { }
 * Dessa forma, vamos realizar uma fun√ß√£o sum, que recebe dois par√¢metros, os valores a serem somados. 
 * E retorna a soma dos dois valores.
 * 
 */

// Criando a fun√ß√£o de soma
function sum(a, b) { // Definindo os dois par√¢metros
  return a + b; // Retornando a soma dos dois valores
}

let resulto = sum(80, 2);

console.log(result);

// Sa√≠da: 82

/**
 *  Entretanto, n√£o existe em Javascript somente essa forma de cria√ß√£o de fun√ß√£o. 
 * Essa forma tradicional √© chamada de function hoisting. Tamb√©m √© poss√≠vel declarar 
 * fun√ß√µes utilizando function expression e arrow functions.
 * 
 */

// '''Function expression''' permite voc√™ "armazenar" uma fun√ß√£o em uma vari√°vel.

// Criando a fun√ß√£o de soma
let sum = function (a, b) { // Definindo os dois par√¢metros
  return a + b; // Retornando a soma dos dois valores
}

let resultt = sum(80, 2);

console.log(result);

// Sa√≠da: 82

/**
 * '''Arrow functions''' s√£o a forma mais curta de cria√ß√£o de uma fun√ß√£o, tornando o c√≥digo bem mais f√°cil de ler. 
 * 
 * Sua constru√ß√£o se baseia na declara√ß√£o de uma vari√°vel, que ir√° receber a fun√ß√£o. A sintaxe da cria√ß√£o de arrow 
 * functions √© a seguinte: os par√¢metros entre ( ), depois a flecha => (por isso o nome arrow), seguido do bloco de 
 * c√≥digo. Assim, ficando dessa forma:
 * 
 */

// Criando a fun√ß√£o soma a partir de uma arrow function
let sum = (a, b) => {
    return a + b
};

// Quando criamos uma fun√ß√£o de apenas uma linha podemos omitir as chaves e o return
let sum = (a, b) => a + b;


/**
 * Usando as fun√ß√µes
 * 
 *  Uma oportunidade muito grande que o Javascript traz √© a maneira de passar fun√ß√µes como 
 * par√¢metros de fun√ß√µes. Assim, isso possibilita diversas usabilidades, como alguns m√©todos 
 * especiais das listas, que vamos mostrar ainda nessa aula.
 * 
 * Como exemplo de passagem de fun√ß√£o como par√¢metro, podemos modificar nossa fun√ß√£o de soma, 
 * recebendo um m√©todo que define o comportamento dela, que ser√° no caso, receber o total e multiplicar por 2.
 */

// Criando a fun√ß√£o soma a partir de uma arrow function
let sum = (a, b, comport) => {
  let soma = a + b; // Realizando a soma
  return comport(soma); // Fazendo o processo da fun√ß√£o e retornando o resultado
};

// Criando a fun√ß√£o de multiplicar por 2, modificando o resultado
function mult2(x) { 
  return x*2 
}

const result = sum(80, 2, mult2);

console.log(result);
// Impress√£o: 164

/**
 * Agora que voc√™ j√° sabe o funcionamento de uma fun√ß√£o passada por par√¢metro, podemos apresentar 
 * alguns m√©todos de listas, o reduce() e o map().
 * 
 * O map ele passa por todos os itens da sequ√™ncia e realiza o c√≥digo proposto dentro dele, 
 * retornando as devidas modifica√ß√µes. Um exemplo de uso √© modificar a lista em que todos os 
 * valores maiores que 10 ser√£o substitu√≠dos por 10.
 * 
 */

const numberss = [0, 1, 2, 3, 4, 11, 13, 10, 17];

// O map ele recebe uma fun√ß√£o como par√¢metro, dando o valor atual da lista para ela,
// que executa o m√©todo que obrigatoriamente tem que retornar um valor
let newList = numbers.map(number => {
  if(number > 10) return 10 // Se for maior que 10, retorna 10
  return number // Sen√£o, retorna o n√∫mero
})

console.log(newList);


//REDUCE


// Sa√≠da: [0, 1, 2, 3, 4, 10, 10, 10, 10]

const numbers = [0, 1, 2, 3, 4, 11, 13, 10, 17];

// O reduce abaixo √© para a soma de todos os elementos do array,
// e ele recebe como par√¢metros a fun√ß√£o e o valor inicial da vari√°vel acumulativa
const sum = numbers.reduce((number, acumulative) => number + acumulative, 0)

console.log(sum);
// Impress√£o: 61

/**
 * A fun√ß√£o reduce √© usada para reduzir um array a um √∫nico valor. Ela percorre cada elemento do array e 
 * realiza uma opera√ß√£o acumulativa neles, produzindo um √∫nico resultado no final.
 * 
 * No exemplo fornecido, temos um array de n√∫meros: [0, 1, 2, 3, 4, 11, 13, 10, 17]. Queremos calcular 
 * a soma de todos esses n√∫meros usando reduce.
 * 
 * A fun√ß√£o reduce √© chamada no array numbers. Ela recebe dois par√¢metros: uma fun√ß√£o e um valor inicial 
 * para a vari√°vel acumulativa.
 * 
 * A fun√ß√£o passada para reduce tem dois par√¢metros, number e acumulative. Ela representa cada elemento 
 * do array atual e o valor acumulativo at√© o momento.
 * 
 * A opera√ß√£o definida na fun√ß√£o √© number + acumulative. Isso significa que estamos adicionando o elemento 
 * atual do array (number) ao valor acumulativo (acumulative). A cada itera√ß√£o, o resultado da opera√ß√£o √© 
 * armazenado como novo valor acumulativo para a pr√≥xima itera√ß√£o.
 * 
 * No exemplo, o valor inicial do acumulador √© 0, conforme especificado no segundo argumento da fun√ß√£o reduce.
 * 
 * Ent√£o, a fun√ß√£o reduce percorre todos os elementos do array, aplicando a opera√ß√£o acumulativa. 
 * No final, retorna o valor acumulado como resultado.
 * 
 * No caso espec√≠fico do exemplo, o resultado impresso √© 61. Isso ocorre porque a fun√ß√£o reduce soma 
 * todos os n√∫meros do array: 0 + 1 + 2 + 3 + 4 + 11 + 13 + 10 + 17 = 61.
 * 
 * Em resumo, a fun√ß√£o reduce permite percorrer um array e realizar uma opera√ß√£o acumulativa nos seus elementos, reduzindo-os a um √∫nico valor no final. No exemplo, usamos reduce para calcular a soma de todos os n√∫meros do array.
 * 
 */

// FUN√á√ïES NO PR√ìPRIO OBJETO

/**
 * Podemos adicionar um m√©todo a esse objeto fazendo uma das propriedades receber uma fun√ß√£o. 
 * A palavra-chave this faz refer√™ncia ao pr√≥prio objeto (como visto no curso de programa√ß√£o orientada a objetos).
 * 
 */


// Criando o objeto com as propriedades j√° estabelecidas
var user = {
  name: "Ant√¥nio", // Propriedade do nome do usu√°rio
  pathPicture: "image-antonio.png", // Caminho o qual guarda a foto de perfil
  bio:
    "I'm a programming enthusiast, without a specific niche, I like everything üòÑüòÑüòÑ", // Bio do perfil
  numberSolvedExercises: 325, // N√∫mero de exerc√≠cios resolvidos
  shoutName: function () {
    console.log(`Meu nome √© ${this.name}`);
  },
};

user.shoutName();